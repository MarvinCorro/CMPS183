(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'auth_user.picture.bbc1d113e229bede.494d475f4368616e675f322e706e67.png'"
p3
sS'layer'
p4
S'/home/marvin/lib/python/web2py/applications/TRVLR/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\ndef user():\n    return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n#<<<<<<< HEAD\n#def index():    \n    #    redirect(URL(c = \'create_profile\', f = \'testing\'))\n#    return dict(message="Mapping the world, for travlers")\n#=======\ndef index():\n    return dict(message="Mapping the world, for travelers")\n#>>>>>>> 52242180f257d101fbada5911903348870013b0a\n\ndef error():\n    return dict()\n\n#@auth.requires_login()\ndef destinations_manage():\n    form = SQLFORM.smartgrid(db.t_destinations,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef profile_manage():\n    return dict(bla="testing")\n\n@auth.requires_login()\ndef profile():\n    return redirect(URL(\'default\',\'users/\'+str(auth.user.id)))\n\n@auth.requires_login()\ndef follow():\n    if request.env.request_method != \'POST\':\n        raise HTTP(400)\n    tablename = \'follows\'\n    to_follow = db.auth_user(request.vars[\'user\'])\n    action = request.vars[\'action\']\n    # FIXME ensure that to-follow user exists!\n    if to_follow is not None:\n        if action == \'follow\':\n            db[tablename].insert(follower=auth.user.id, followee=to_follow)\n            return HTTP(200)\n        elif action == \'unfollow\':\n            db(db.follows.follower==auth.user.id,\n               db.follows.followee==to_follow).delete()\n            return HTTP(200)\n        else:\n            return HTTP(400)\n        return HTTP(200)\n    else:\n        raise HTTP(400)\n\ndef users():\n    """\n    Display user profile\n    """\n    if request.args(0) is not None:\n        uid = request.args(0)\n        # TODO handle failure\n        user = db.auth_user[request.args(0)]\n        name = user.first_name + \' \' + user.last_name\n        followers = db(db.follows.followee==uid).select(db.follows.ALL)\n        following = db(db.follows.follower==uid).select(db.follows.ALL)\n        picture   = user.picture\n        context = dict(name=name,followers=followers,following=following,picture=picture)\n        return response.render(\'default/users.html\', context)\n    else:\n        # TODO do something sensible?\n        return redirect(URL(\'default\',\'index\'))\n\nresponse._vars=response._caller(users)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marvin/lib/python/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/marvin/lib/python/web2py/applications/TRVLR/controllers/default.py", line 73, in <module>\n  File "/home/marvin/lib/python/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/marvin/lib/python/web2py/applications/TRVLR/controllers/default.py", line 62, in users\n    user = db.auth_user[request.args(0)]\n  File "/home/marvin/lib/python/web2py/gluon/packages/dal/pydal/objects.py", line 517, in __getitem__\n    raise KeyError(key)\nKeyError: \'auth_user.picture.bbc1d113e229bede.494d475f4368616e675f322e706e67.png\'\n'
p11
s.